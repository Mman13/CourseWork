////////////////////////////////////////////////////////////////////////////////
// Filename: Reflection.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures;
SamplerState SampleType;
Texture2D reflectionTexture;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float4 reflectionPosition : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

float4 ReflectionPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
	float2 reflectTexCoord;
	float4 reflectionColor;
    float4 color;

	//Sample the texture pixel at this location
	textureColor = shaderTextures.Sample(SampleType, input.tex);

	// Calculate the projected reflection texture coordinates.
    reflectTexCoord.x = input.reflectionPosition.x / input.reflectionPosition.w / 2.0f + 0.5f;
    reflectTexCoord.y = -input.reflectionPosition.y / input.reflectionPosition.w / 2.0f + 0.5f;

	// Sample the texture pixel from the reflection texture using the projected texture coordinates.
    reflectionColor = reflectionTexture.Sample(SampleType, input.tex);//reflectTexCoord

	color = lerp(textureColor, reflectionColor, 0.3f);;
	

    return color;
}